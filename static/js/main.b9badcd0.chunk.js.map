{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","completed","title","id","cn","TodoList","todos","map","username","userId","App","getUserById","users","find","todosWithUser","todosFromServer","usersFromServer","useState","setTodos","todoTitle","setTodoTitle","hasTitleError","setHasTitleError","todoUserId","settodoUserId","hasUserIdError","setUserIdError","action","method","onSubmit","event","preventDefault","trimTitle","trim","todoTitle1","todoUserId1","getTodos","newTodo","Math","max","currentTodo","addNewTodo","type","value","onChange","target","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9badcd0.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo:React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { TodoWithUser } from '../../types/TodoWithUser';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const { completed, title, user } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoWithUser } from '../../types/TodoWithUser';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoWithUser } from './types/TodoWithUser';\nimport { User } from './types/User';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const getUserById = (userId:number, users:User[]) => {\n    const foundUser = users.find(user => user.id === userId);\n\n    return foundUser || null;\n  };\n\n  const todosWithUser: TodoWithUser[] = todosFromServer.map(todo => ({\n    ...todo,\n    user: getUserById(todo.userId, usersFromServer),\n  }));\n\n  const [todos, setTodos] = useState<TodoWithUser[]>(todosWithUser);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [todoUserId, settodoUserId] = useState(0);\n  const [hasUserIdError, setUserIdError] = useState(false);\n\n  const generateId = (getTodos:TodoWithUser[]) => {\n    const id = Math.max(...getTodos.map((todo) => todo.id));\n\n    return id + 1;\n  };\n\n  const addNewTodo = (todoTitle1: string, todoUserId1: number) => {\n    const newTodo: TodoWithUser = {\n      id: generateId(todos),\n      title: todoTitle1,\n      completed: false,\n      userId: todoUserId1,\n      user: getUserById(todoUserId, usersFromServer),\n    };\n\n    setTodos(currentTodo => [...currentTodo, newTodo]);\n  };\n\n  const resetForm = () => {\n    setTodoTitle('');\n    settodoUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const trimTitle = todoTitle.trim();\n\n    setHasTitleError(!trimTitle);\n    setUserIdError(!todoUserId);\n\n    if (!trimTitle || !todoUserId) {\n      return;\n    }\n\n    addNewTodo(todoTitle, todoUserId);\n    resetForm();\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    settodoUserId(+event.target.value);\n    setUserIdError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            onChange={handleInput}\n            placeholder=\"Enter a title\"\n          />\n          {hasTitleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={todoUserId}\n            onChange={handleSelect}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map((user) => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}